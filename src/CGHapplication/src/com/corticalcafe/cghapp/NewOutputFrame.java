/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewOutputFrame.java
 *
 * Created on Oct 23, 2010, 1:55:02 PM
 */

package com.corticalcafe.cghapp;

import com.corticalcafe.primitives.DebugMessages;
import com.corticalcafe.primitives.math.ImageFFT;
import com.corticalcafe.utils.MiscUtils;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;

/**
 *
 * @author astein
 */
public class NewOutputFrame extends javax.swing.JFrame {

    /** Creates new form NewOutputFrame */
    public NewOutputFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemSaveAsGIF = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemDraw = new javax.swing.JMenuItem();
        jMenuItemClear = new javax.swing.JMenuItem();
        jMenuItemRepaint = new javax.swing.JMenuItem();
        jCheckBoxMenuItemReconstruct = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.corticalcafe.cghapp.CGHapplication.class).getContext().getResourceMap(NewOutputFrame.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1MouseDragged(evt);
            }
        });
        jScrollPane1.setViewportView(jLabel1);

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItemSaveAsGIF.setText(resourceMap.getString("jMenuItemSaveAsGIF.text")); // NOI18N
        jMenuItemSaveAsGIF.setName("jMenuItemSaveAsGIF"); // NOI18N
        jMenuItemSaveAsGIF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveAsGIFActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSaveAsGIF);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N

        jMenuItemDraw.setText(resourceMap.getString("jMenuItemDraw.text")); // NOI18N
        jMenuItemDraw.setName("jMenuItemDraw"); // NOI18N
        jMenuItemDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDrawActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemDraw);

        jMenuItemClear.setText(resourceMap.getString("jMenuItemClear.text")); // NOI18N
        jMenuItemClear.setName("jMenuItemClear"); // NOI18N
        jMenuItemClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemClear);

        jMenuItemRepaint.setText(resourceMap.getString("jMenuItemRepaint.text")); // NOI18N
        jMenuItemRepaint.setName("jMenuItemRepaint"); // NOI18N
        jMenuItemRepaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRepaintActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemRepaint);

        jCheckBoxMenuItemReconstruct.setText(resourceMap.getString("jCheckBoxMenuItemReconstruct.text")); // NOI18N
        jCheckBoxMenuItemReconstruct.setName("jCheckBoxMenuItemReconstruct"); // NOI18N
        jCheckBoxMenuItemReconstruct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemReconstructActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItemReconstruct);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSaveAsGIFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveAsGIFActionPerformed
    //  Captures from awt based component
      Component c=jLabel1;
      Image img=c.createImage(c.getWidth(), c.getHeight());
      Graphics g=img.getGraphics();
      c.printAll(g);

     JFileChooser jfc=new JFileChooser(curDir);
     jfc.setSelectedFile(new File(getTitle()+".gif"));

     int result=jfc.showSaveDialog(this);

      if(result==JFileChooser.APPROVE_OPTION)
      {
        File f=jfc.getSelectedFile();
        MiscUtils.writeImage(img, MiscUtils.formatGIF, f);
      }
    }//GEN-LAST:event_jMenuItemSaveAsGIFActionPerformed



    static final int ROIMODE_RESIZE=0;
    static final int ROIMODE_PAN=1;

    int mouseMode=ROIMODE_RESIZE;

    Rectangle2D roi=new Rectangle2D.Float();
    Point mouseDown=new Point();


    private void jLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseDragged

//        DebugMessages.debug("Mouse dragged");

        clearROI();
        Rectangle2D oldROI=roi;

        switch(mouseMode)
        {
            case ROIMODE_RESIZE:
//                roi.setRect(oldROI.getX(), oldROI.getY(), evt.getX()-oldROI.getMinX(), evt.getY()-oldROI.getMinY());
                roi.setRect(oldROI.getX(), oldROI.getY(), 64, 64);

                break;

            case ROIMODE_PAN:
                roi.setRect(evt.getX()-mouseDown.getX(), evt.getY()-mouseDown.getY(),
                        oldROI.getWidth(), oldROI.getHeight());
                break;
        }

        drawROI();
    }//GEN-LAST:event_jLabel1MouseDragged




    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed

//        DebugMessages.debug("Mouse pressed");

        mouseDown.setLocation(evt.getX()-roi.getMinX(), evt.getY()-roi.getMinY());

        clearROI();

        Rectangle2D oldROI=roi;

        if(roi.contains(evt.getX(), evt.getY()))
            mouseMode=ROIMODE_PAN;
        else
            mouseMode=ROIMODE_RESIZE;


        switch(mouseMode)
        {
            case ROIMODE_RESIZE:
                    roi.setRect(evt.getX(), evt.getY(), 2, 2);
                break;

            case ROIMODE_PAN:

                break;
        }

        drawROI();
    }//GEN-LAST:event_jLabel1MousePressed


    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased

//        DebugMessages.debug("Mouse released");

        if(jCheckBoxMenuItemReconstruct.isSelected())
        {
            updateRecon();
        }
        
        drawROI();
    }//GEN-LAST:event_jLabel1MouseReleased

    private void jMenuItemDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDrawActionPerformed
        drawROI();
    }//GEN-LAST:event_jMenuItemDrawActionPerformed

    private void jMenuItemClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearActionPerformed
        clearROI();
    }//GEN-LAST:event_jMenuItemClearActionPerformed

    private void jMenuItemRepaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRepaintActionPerformed
        this.repaint();
    }//GEN-LAST:event_jMenuItemRepaintActionPerformed


    NewOutputFrame recon;

    private void jCheckBoxMenuItemReconstructActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemReconstructActionPerformed

    }//GEN-LAST:event_jCheckBoxMenuItemReconstructActionPerformed



    void drawROI()
    {
        jLabel1.getGraphics().drawRect((int)roi.getMinX(), (int)roi.getMinY(),
                (int)roi.getWidth(), (int)roi.getHeight());

//        this.repaint();
    }


    void clearROI()
    {
//        jLabel1.getGraphics().clearRect((int)roi.getMinX(), (int)roi.getMinY(),
//                (int)roi.getWidth(), (int)roi.getHeight());

        this.repaint();
    }


    void updateRecon()
    {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();


        if(recon==null || !recon.isVisible())
        {

            recon=new NewOutputFrame();

            recon.setSaveDir(curDir);

            recon.setTitle("Simulated reconstruction");
            recon.setVisible(true);

            int hsize=(int)roi.getWidth()+20;
            int vsize=(int)roi.getHeight()+60;


            if(hsize>screenSize.getWidth())
                hsize=(int)screenSize.getWidth();

            if(vsize>screenSize.getHeight())
                vsize=(int)screenSize.getHeight();


            ImageIcon ii=(ImageIcon)jLabel1.getIcon();

            BufferedImage clipped=((BufferedImage)ii.getImage()).getSubimage(
                    (int)roi.getMinX(), (int)roi.getMinY(), (int)roi.getWidth(), (int)roi.getHeight());

            recon.setImage(clipped);


            recon.pack();
            recon.setSize(hsize, vsize);

            //Center the window
            recon.setLocation((screenSize.width - hsize) / 2, (screenSize.height - vsize) / 2);

        }
        else
        {
            int hsize=(int)roi.getWidth()+20;
            int vsize=(int)roi.getHeight()+60;


            if(hsize>screenSize.getWidth())
                hsize=(int)screenSize.getWidth();

            if(vsize>screenSize.getHeight())
                vsize=(int)screenSize.getHeight();


            ImageIcon ii=(ImageIcon)jLabel1.getIcon();
            

            BufferedImage clipped;

            clipped=((BufferedImage)ii.getImage()).getSubimage(
                    (int)roi.getMinX(), (int)roi.getMinY(), (int)roi.getWidth(), (int)roi.getHeight());

//            clipped=(BufferedImage)ii.getImage();

            clipped=(BufferedImage) ImageFFT.computeFFT(clipped);

            recon.setImage(clipped);

            recon.pack();
            recon.setSize(hsize, vsize);

            recon.repaint();
        }

    }



  File curDir=new File("");


  public void setSaveDir(File dir)
  {
      curDir=dir;
  }


  public void setImage(Image image)
  {
    jLabel1.setIcon(new ImageIcon(image));
    jLabel1.setText("");
    this.repaint();
  }



    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewOutputFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemReconstruct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemClear;
    private javax.swing.JMenuItem jMenuItemDraw;
    private javax.swing.JMenuItem jMenuItemRepaint;
    private javax.swing.JMenuItem jMenuItemSaveAsGIF;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
