/*
 *
 * The CorticalCafe Computer Generated Hologram (CGH) Construction Kit
 * (C)2010 Alan Stein
 * www.corticalcafe.com
 *
 * Code released under the GPL v3.
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software freedom is about:
 *    - the freedom to use software for any purpose,
 *    - the freedom to change software to suit your needs,
 *    - the freedom to share software with your friends and neighbors, and
 *    - the freedom to share the changes you make.
 *
 * Take the time to learn about and support free software.
 * If you don't, who will?
 *
 */

package com.corticalcafe.cghapp;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

import java.awt.*;

import java.awt.image.BufferedImage;

import java.io.*;

import com.corticalcafe.primitives.physics.*;
import com.corticalcafe.primitives.DebugMessages;


import com.corticalcafe.utils.MiscUtils;
import java.text.DecimalFormat;
import java.text.NumberFormat;


/**
 * The application's main frame.
 */
public class CGHapplicationView extends FrameView {

    public CGHapplicationView(SingleFrameApplication app) {
        super(app);

        initComponents();

        DebugMessages.setMessageLevel(DebugMessages.MESSAGES_INFORM);    //set my debug level

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = CGHapplication.getApplication().getMainFrame();
            aboutBox = new CGHapplicationAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        CGHapplication.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSimDescr = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabelPlateSampling = new javax.swing.JLabel();
        jComboBoxQuickPick = new javax.swing.JComboBox();
        jTextFieldXoffset = new javax.swing.JTextField();
        jTextFieldYoffset = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldPlateXsampling = new javax.swing.JTextField();
        jTextFieldPlateYresolution = new javax.swing.JTextField();
        jTextFieldPlateXresolution = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPlateYsampling = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxCenterPlate = new javax.swing.JCheckBox();
        jCheckBoxRandomPhase = new javax.swing.JCheckBox();
        jCheckBoxDiffractionGrating = new javax.swing.JCheckBox();
        jComboBoxGratingOrder = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jButtonStart = new javax.swing.JButton();
        jButtonShowOutput = new javax.swing.JButton();
        jComboBoxOutputType = new javax.swing.JComboBox();
        jSliderThresh = new javax.swing.JSlider();
        jButtonSetThreshToMedian = new javax.swing.JButton();
        jButtonSetThreshToHalf = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabelInputImageDepth = new javax.swing.JLabel();
        jCheckBoxCenterObject = new javax.swing.JCheckBox();
        jCheckBoxScaleObject = new javax.swing.JCheckBox();
        jLabelInputImageSampling = new javax.swing.JLabel();
        jLabelInputImageWavelength = new javax.swing.JLabel();
        jLabelInputFile = new javax.swing.JLabel();
        jTextFieldInputFile = new javax.swing.JTextField();
        jButtonFileChooser = new javax.swing.JButton();
        jTextFieldObjectSampling = new javax.swing.JTextField();
        jTextFieldImageWavelength = new javax.swing.JTextField();
        jTextFieldImageDepth = new javax.swing.JTextField();
        jCheckBoxOptimizeDepth = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenuMisc = new javax.swing.JMenu();
        jCheckBoxMenuItemNormalizePlateValues = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemClipPlateValues = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemUseThreading = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemUseLowPriority = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemUseAttenuation = new javax.swing.JCheckBoxMenuItem();
        jMenuTools = new javax.swing.JMenu();
        jMenuItemShowImage = new javax.swing.JMenuItem();
        jMenuItemVaryThreshold = new javax.swing.JMenuItem();
        jMenuItemBatchControl = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusAnimationLabel = new javax.swing.JLabel();
        jProgressBarStatus = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                mainPanelPropertyChange(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextAreaSimDescr.setColumns(20);
        jTextAreaSimDescr.setRows(5);
        jTextAreaSimDescr.setName("jTextAreaSimDescr"); // NOI18N
        jScrollPane1.setViewportView(jTextAreaSimDescr);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setName("jPanel2"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.corticalcafe.cghapp.CGHapplication.class).getContext().getResourceMap(CGHapplicationView.class);
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabelPlateSampling.setText(resourceMap.getString("jLabelPlateSampling.text")); // NOI18N
        jLabelPlateSampling.setName("jLabelPlateSampling"); // NOI18N

        jComboBoxQuickPick.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "300x300", "600x600", "1200x600", "1200x1200", "2400x2400" }));
        jComboBoxQuickPick.setToolTipText(resourceMap.getString("jComboBoxQuickPick.toolTipText")); // NOI18N
        jComboBoxQuickPick.setName("jComboBoxQuickPick"); // NOI18N
        jComboBoxQuickPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxQuickPickActionPerformed(evt);
            }
        });

        jTextFieldXoffset.setText(resourceMap.getString("jTextFieldXoffset.text")); // NOI18N
        jTextFieldXoffset.setName("jTextFieldXoffset"); // NOI18N

        jTextFieldYoffset.setText(resourceMap.getString("jTextFieldYoffset.text")); // NOI18N
        jTextFieldYoffset.setName("jTextFieldYoffset"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jTextFieldPlateXsampling.setText(resourceMap.getString("jTextFieldPlateXsampling.text")); // NOI18N
        jTextFieldPlateXsampling.setName("jTextFieldPlateXsampling"); // NOI18N

        jTextFieldPlateYresolution.setText(resourceMap.getString("jTextFieldPlateYresolution.text")); // NOI18N
        jTextFieldPlateYresolution.setName("jTextFieldPlateYresolution"); // NOI18N

        jTextFieldPlateXresolution.setText(resourceMap.getString("jTextFieldPlateXresolution.text")); // NOI18N
        jTextFieldPlateXresolution.setName("jTextFieldPlateXresolution"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jTextFieldPlateYsampling.setText(resourceMap.getString("jTextFieldPlateYsampling.text")); // NOI18N
        jTextFieldPlateYsampling.setName("jTextFieldPlateYsampling"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldPlateXresolution, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldXoffset, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldYoffset)
                            .addComponent(jTextFieldPlateYresolution, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(71, 71, 71)
                .addComponent(jLabelPlateSampling)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextFieldPlateXsampling, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPlateYsampling, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxQuickPick, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldPlateXsampling, jTextFieldPlateYsampling});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldPlateXresolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldPlateYresolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPlateSampling)
                    .addComponent(jTextFieldPlateXsampling, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldPlateYsampling, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldYoffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldXoffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBoxQuickPick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setName("jPanel3"); // NOI18N

        jCheckBoxCenterPlate.setText(resourceMap.getString("jCheckBoxCenterPlate.text")); // NOI18N
        jCheckBoxCenterPlate.setToolTipText(resourceMap.getString("jCheckBoxCenterPlate.toolTipText")); // NOI18N
        jCheckBoxCenterPlate.setName("jCheckBoxCenterPlate"); // NOI18N

        jCheckBoxRandomPhase.setText(resourceMap.getString("jCheckBoxRandomPhase.text")); // NOI18N
        jCheckBoxRandomPhase.setToolTipText(resourceMap.getString("jCheckBoxRandomPhase.toolTipText")); // NOI18N
        jCheckBoxRandomPhase.setName("jCheckBoxRandomPhase"); // NOI18N

        jCheckBoxDiffractionGrating.setText(resourceMap.getString("jCheckBoxDiffractionGrating.text")); // NOI18N
        jCheckBoxDiffractionGrating.setToolTipText(resourceMap.getString("jCheckBoxDiffractionGrating.toolTipText")); // NOI18N
        jCheckBoxDiffractionGrating.setName("jCheckBoxDiffractionGrating"); // NOI18N

        jComboBoxGratingOrder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "4", "8", "16", "32", "64", "128", "256", "512" }));
        jComboBoxGratingOrder.setName("jComboBoxGratingOrder"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxCenterPlate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxRandomPhase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxDiffractionGrating)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxGratingOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(287, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBoxCenterPlate)
                .addComponent(jCheckBoxRandomPhase)
                .addComponent(jCheckBoxDiffractionGrating)
                .addComponent(jComboBoxGratingOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setName("jPanel4"); // NOI18N

        jButtonStart.setText(resourceMap.getString("jButtonStart.text")); // NOI18N
        jButtonStart.setName("jButtonStart"); // NOI18N
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jButtonShowOutput.setText(resourceMap.getString("jButtonShowOutput.text")); // NOI18N
        jButtonShowOutput.setName("jButtonShowOutput"); // NOI18N
        jButtonShowOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowOutputActionPerformed(evt);
            }
        });

        jComboBoxOutputType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Real", "Real_Binary", "Imaginary", "Imaginary_Binary", "Amplitude", "Amtplitude_Binary", "Phase", "Phase_Binary", "Intensity", "Intensity_Binary" }));
        jComboBoxOutputType.setToolTipText(resourceMap.getString("jComboBoxOutputType.toolTipText")); // NOI18N
        jComboBoxOutputType.setName("jComboBoxOutputType"); // NOI18N

        jSliderThresh.setMaximum(255);
        jSliderThresh.setValue(127);
        jSliderThresh.setName("jSliderThresh"); // NOI18N

        jButtonSetThreshToMedian.setText(resourceMap.getString("jButtonSetThreshToMedian.text")); // NOI18N
        jButtonSetThreshToMedian.setName("jButtonSetThreshToMedian"); // NOI18N
        jButtonSetThreshToMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetThreshToMedianActionPerformed(evt);
            }
        });

        jButtonSetThreshToHalf.setText(resourceMap.getString("jButtonSetThreshToHalf.text")); // NOI18N
        jButtonSetThreshToHalf.setName("jButtonSetThreshToHalf"); // NOI18N
        jButtonSetThreshToHalf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetThreshToHalfActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxOutputType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonStart)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonShowOutput)))
                .addGap(58, 58, 58)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButtonSetThreshToMedian)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSetThreshToHalf))
                    .addComponent(jSliderThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(231, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonSetThreshToMedian)
                            .addComponent(jButtonSetThreshToHalf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonStart)
                            .addComponent(jButtonShowOutput))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxOutputType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setName("jPanel5"); // NOI18N

        jLabelInputImageDepth.setText(resourceMap.getString("jLabelInputImageDepth.text")); // NOI18N
        jLabelInputImageDepth.setName("jLabelInputImageDepth"); // NOI18N

        jCheckBoxCenterObject.setSelected(true);
        jCheckBoxCenterObject.setText(resourceMap.getString("jCheckBoxCenterObject.text")); // NOI18N
        jCheckBoxCenterObject.setName("jCheckBoxCenterObject"); // NOI18N

        jCheckBoxScaleObject.setText(resourceMap.getString("jCheckBoxScaleObject.text")); // NOI18N
        jCheckBoxScaleObject.setName("jCheckBoxScaleObject"); // NOI18N

        jLabelInputImageSampling.setText(resourceMap.getString("jLabelInputImageSampling.text")); // NOI18N
        jLabelInputImageSampling.setName("jLabelInputImageSampling"); // NOI18N

        jLabelInputImageWavelength.setText(resourceMap.getString("jLabelInputImageWavelength.text")); // NOI18N
        jLabelInputImageWavelength.setName("jLabelInputImageWavelength"); // NOI18N

        jLabelInputFile.setText(resourceMap.getString("jLabelInputFile.text")); // NOI18N
        jLabelInputFile.setName("jLabelInputFile"); // NOI18N

        jTextFieldInputFile.setText(resourceMap.getString("jTextFieldInputFile.text")); // NOI18N
        jTextFieldInputFile.setName("jTextFieldInputFile"); // NOI18N

        jButtonFileChooser.setText(resourceMap.getString("jButtonFileChooser.text")); // NOI18N
        jButtonFileChooser.setName("jButtonFileChooser"); // NOI18N
        jButtonFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFileChooserActionPerformed(evt);
            }
        });

        jTextFieldObjectSampling.setText(resourceMap.getString("jTextFieldObjectSampling.text")); // NOI18N
        jTextFieldObjectSampling.setName("jTextFieldObjectSampling"); // NOI18N

        jTextFieldImageWavelength.setText(resourceMap.getString("jTextFieldImageWavelength.text")); // NOI18N
        jTextFieldImageWavelength.setName("jTextFieldImageWavelength"); // NOI18N

        jTextFieldImageDepth.setText(resourceMap.getString("jTextFieldImageDepth.text")); // NOI18N
        jTextFieldImageDepth.setName("jTextFieldImageDepth"); // NOI18N

        jCheckBoxOptimizeDepth.setSelected(true);
        jCheckBoxOptimizeDepth.setText(resourceMap.getString("jCheckBoxOptimizeDepth.text")); // NOI18N
        jCheckBoxOptimizeDepth.setName("jCheckBoxOptimizeDepth"); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelInputImageWavelength)
                    .addComponent(jLabelInputImageDepth))
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldImageWavelength, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldImageDepth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOptimizeDepth)
                .addGap(1, 1, 1)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jCheckBoxCenterObject)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxScaleObject))
                    .addComponent(jLabelInputFile))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabelInputImageSampling)
                        .addGap(4, 4, 4)
                        .addComponent(jTextFieldObjectSampling))
                    .addComponent(jTextFieldInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFileChooser)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInputImageDepth)
                    .addComponent(jTextFieldImageDepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxCenterObject)
                    .addComponent(jCheckBoxScaleObject)
                    .addComponent(jLabelInputImageSampling)
                    .addComponent(jTextFieldObjectSampling, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxOptimizeDepth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInputImageWavelength)
                    .addComponent(jTextFieldImageWavelength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelInputFile)
                    .addComponent(jTextFieldInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFileChooser))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.corticalcafe.cghapp.CGHapplication.class).getContext().getActionMap(CGHapplicationView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenuMisc.setText(resourceMap.getString("jMenuMisc.text")); // NOI18N
        jMenuMisc.setName("jMenuMisc"); // NOI18N

        jCheckBoxMenuItemNormalizePlateValues.setSelected(true);
        jCheckBoxMenuItemNormalizePlateValues.setText(resourceMap.getString("jCheckBoxMenuItemNormalizePlateValues.text")); // NOI18N
        jCheckBoxMenuItemNormalizePlateValues.setName("jCheckBoxMenuItemNormalizePlateValues"); // NOI18N
        jMenuMisc.add(jCheckBoxMenuItemNormalizePlateValues);

        jCheckBoxMenuItemClipPlateValues.setText(resourceMap.getString("jCheckBoxMenuItemClipPlateValues.text")); // NOI18N
        jCheckBoxMenuItemClipPlateValues.setName("jCheckBoxMenuItemClipPlateValues"); // NOI18N
        jMenuMisc.add(jCheckBoxMenuItemClipPlateValues);

        jCheckBoxMenuItemUseThreading.setSelected(true);
        jCheckBoxMenuItemUseThreading.setText(resourceMap.getString("jCheckBoxMenuItemUseThreading.text")); // NOI18N
        jCheckBoxMenuItemUseThreading.setName("jCheckBoxMenuItemUseThreading"); // NOI18N
        jMenuMisc.add(jCheckBoxMenuItemUseThreading);

        jCheckBoxMenuItemUseLowPriority.setSelected(true);
        jCheckBoxMenuItemUseLowPriority.setText(resourceMap.getString("jCheckBoxMenuItemUseLowPriority.text")); // NOI18N
        jCheckBoxMenuItemUseLowPriority.setName("jCheckBoxMenuItemUseLowPriority"); // NOI18N
        jMenuMisc.add(jCheckBoxMenuItemUseLowPriority);

        jCheckBoxMenuItemUseAttenuation.setText(resourceMap.getString("jCheckBoxMenuItemUseAttenuation.text")); // NOI18N
        jCheckBoxMenuItemUseAttenuation.setName("jCheckBoxMenuItemUseAttenuation"); // NOI18N
        jMenuMisc.add(jCheckBoxMenuItemUseAttenuation);

        menuBar.add(jMenuMisc);

        jMenuTools.setText(resourceMap.getString("jMenuTools.text")); // NOI18N
        jMenuTools.setName("jMenuTools"); // NOI18N

        jMenuItemShowImage.setText(resourceMap.getString("jMenuItemShowImage.text")); // NOI18N
        jMenuItemShowImage.setName("jMenuItemShowImage"); // NOI18N
        jMenuItemShowImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemShowImageActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemShowImage);

        jMenuItemVaryThreshold.setText(resourceMap.getString("jMenuItemVaryThreshold.text")); // NOI18N
        jMenuItemVaryThreshold.setName("jMenuItemVaryThreshold"); // NOI18N
        jMenuItemVaryThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVaryThresholdActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemVaryThreshold);

        jMenuItemBatchControl.setText(resourceMap.getString("jMenuItemBatchControl.text")); // NOI18N
        jMenuItemBatchControl.setEnabled(false);
        jMenuItemBatchControl.setName("jMenuItemBatchControl"); // NOI18N
        jMenuItemBatchControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBatchControlActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemBatchControl);

        menuBar.add(jMenuTools);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusPanel.setName("statusPanel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        jProgressBarStatus.setName("jProgressBarStatus"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                        .addGap(156, 156, 156)
                        .addComponent(statusAnimationLabel))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBarStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)))
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
      
        if(simulation.isSimulationRunning()){
            DebugMessages.inform("Stopping simulation");
            simulation.stopSimulation();
        }
        else
        {
            DebugMessages.inform("Starting simulation");
            updateStatus("Initializing Simulation...");

            simulation.setRandomPhase(jCheckBoxRandomPhase.isSelected());
            simulation.setMultithread(jCheckBoxMenuItemUseThreading.getState());

            if(jCheckBoxMenuItemUseLowPriority.getState())
                simulation.setPriority(1);
            else
                simulation.setPriority(5);

            simulation.setAttenuationType(jCheckBoxMenuItemUseAttenuation.isSelected());

            int order=Integer.parseInt(jComboBoxGratingOrder.getSelectedItem().toString());
            int xRes=Integer.parseInt(jTextFieldPlateXresolution.getText());
            int yRes=Integer.parseInt(jTextFieldPlateYresolution.getText());
            double plateXsampling=Double.valueOf(jTextFieldPlateXsampling.getText());
            double plateYsampling=Double.valueOf(jTextFieldPlateYsampling.getText());

            MiscUtils.forceGarbageCollection();     //free up what we can before we start grabbing more memory

            //dummy PSA used because first time run has instantiation issue to be debugged
            PointSourceArray dummyPSA=new PointSourceArray();
            dummyPSA.addPointSource(new PointSource(0.0150, 0.0150, 4, 1, 670e-9, -1.25));
            simulation.setObject(dummyPSA);
            simulation.addNewPlate(xRes, yRes, plateXsampling, plateYsampling); //init object and plate

            if(jCheckBoxDiffractionGrating.isSelected())    //generate diffraction grating if desired
            {
              DebugMessages.inform("Starting diffraction grating");
              setSimDescrWindow("Simulation Description:\n"
                +"Diffraction Grating, Period="+order+"\n"
                +"Plate Xres="+xRes+"\n"
                +"Plate Yres="+yRes+"\n");

              updateStatus("Computing Diffraction Grating...");
              simulation.getPlate().createDiffractionGrating(order);
              updateStatus("Diffraction Grating Generated");
            }
            else
            {
              DebugMessages.inform("Starting hologram");


            simulation.getPlate().debug("Plate: ");
            
            PointSourceArray objectPSA=new PointSourceArray();
            double objectSampling;
            objectSampling=Double.valueOf(jTextFieldObjectSampling.getText()); //user defined opject sampling

            double imageDepth=Double.parseDouble(jTextFieldImageDepth.getText());
            double imageWavelength=Double.parseDouble(jTextFieldImageWavelength.getText());

            objectPSA.loadPointSourceArrayFromFile(inputFile, 0, 0, imageDepth,
                      objectSampling, imageWavelength);


            if(objectPSA.getNumberOfPoints()==0)
            {
                setSimDescrWindow("Could not load input file!");
                return;
            }

            if(objectPSA.getFileType()!=PointSourceArray.FILETYPE_IMAGE)
            {
                jTextFieldImageDepth.setText(String.valueOf(objectPSA.getPointSource(0).getPoint3D().getZ()));
                jCheckBoxOptimizeDepth.setSelected(false);
            }

            objectPSA.debugSummary("Original Object");

            //scales the object to the same size as the plate
            if(jCheckBoxScaleObject.isSelected() && objectPSA.getNumberOfPoints()>1)  //scale object to same size as plate
            {
                objectPSA.scaleXYtoPlate(simulation.getPlate());
                objectPSA.debugSummary("Scaled Object");
            }



            //center the object WRT the XY origin (should be used w/ center plate)
            if(jCheckBoxCenterObject.isSelected())
            {
                objectPSA.centerObjectXY();
                objectPSA.debugSummary("Centered Object");
            }


            //center plate if selected, and also if object is being centered
            if(jCheckBoxCenterPlate.isSelected() || jCheckBoxCenterObject.isSelected())
            {
              objectPSA.shiftXYZ((simulation.getPlate().maxXres/2.0)*plateXsampling,
                  (simulation.getPlate().maxYres/2.0)*plateYsampling, 0);
              objectPSA.debugSummary("Object Centered WRT Plate");
            }


              //apply XY offset (if any) to object
            if(Double.parseDouble(jTextFieldXoffset.getText()) != 0
                    || Double.parseDouble(jTextFieldYoffset.getText()) != 0 )
            {
                  objectPSA.shiftXYZ(Double.parseDouble(jTextFieldXoffset.getText())*plateXsampling,
                      Double.parseDouble(jTextFieldYoffset.getText())*plateYsampling, 0);
                  objectPSA.debugSummary("Offset Shifted Object");
            }


          DebugMessages.inform("Setting simulation pointsource object");
          simulation.setObject(objectPSA);
          simulation.initializeSimulation();
          updateStatus("Initialized...");

            if(jCheckBoxOptimizeDepth.isSelected())
            {
                NumberFormat formatter = new DecimalFormat("#.##");
                double newDepth=simulation.getOptimalObjectDepth();
                jTextFieldImageDepth.setText(formatter.format(newDepth));
                simulation.getObject().changeZ(newDepth);
            }



              //note, getting sim status may fail if sim thread didn't init obj/plt yet

              setSimDescrWindow("Simulation Description:\n"
                +"Obj Pts="+simulation.getObject().getNumberOfPoints()+"\n"
                +"Plt Pts="+simulation.getPlate().getNumberOfPoints()
                +" ["+simulation.getPlate().getXresolution()+","+simulation.getPlate().getYresolution()+"]"
                +" Xsamp="+simulation.getPlate().getXsamplingRate()+"\n"
                +" Ysamp="+simulation.getPlate().getYsamplingRate()+"\n"
                +"Total Rays="+simulation.getTotalRayCount());

              DebugMessages.inform("Starting simulation thread");
              simulation.startSimulation(); //start simulation thread


                class UpdateSimInfo extends Thread {
                    UpdateSimInfo() {
                    }

                    @Override public void run() {
                        jProgressBarStatus.setIndeterminate(false);
                        do
                        {
                          try
                          {
                            Thread.sleep(250);
                          }
                          catch (InterruptedException ex)
                          {
                            ex.printStackTrace();
                          }

                          updateStatus(simulation.getStatus());
                          jProgressBarStatus.setValue((int)simulation.getPercentComplete());
    //                    }while(simulation.getCurrentRayNumber()<simulation.getTotalRayCount());
                        }while(simulation.isSimulationRunning());

                    }
                    //    simulation.getPlate().debug();    //print *all* values on plate!            }
                }

              UpdateSimInfo usim=new UpdateSimInfo();
              usim.start();    //start thread to update status bar with thread progress each second
            }


        }

    }//GEN-LAST:event_jButtonStartActionPerformed


    void setSimDescrWindow(String str)
    {
        jTextAreaSimDescr.setText(str);
    }


    private void jButtonShowOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowOutputActionPerformed
        RealPhotoPlate of=new RealPhotoPlate(simulation.getPlate());

        of.computeOutputImage(jComboBoxOutputType.getSelectedIndex(),
                jCheckBoxMenuItemNormalizePlateValues.isSelected(),
                jCheckBoxMenuItemClipPlateValues.isSelected(),
                jSliderThresh.getValue());

//        double imageDepth=Float.valueOf(jTextFieldImageDepth.getText())*100;

        double imageDepth=simulation.getObject().getPointSource(0).getPoint3D().getZ()*100.;

        of.setDescr(MiscUtils.removeExtension(getDescription(of))
                +"_"+String.valueOf((int)imageDepth)+"cm"
                +"_"+jComboBoxOutputType.getSelectedItem().toString());

        displayImage(of.getOutputImage(), of.getDescr());
    }//GEN-LAST:event_jButtonShowOutputActionPerformed



    String getDescription(RealPhotoPlate of)
    {
        String retVal=inputFile.getName()+"_"+
            jComboBoxOutputType.getSelectedItem().toString();

        if(of.isOutputQuantized())
            retVal=retVal+"_"+jSliderThresh.getValue();

        return retVal;
    }

    
    private void jButtonFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFileChooserActionPerformed
        JFileChooser jfc=new JFileChooser(inputFile);
        int result=jfc.showOpenDialog(null);

        if(result==JFileChooser.APPROVE_OPTION)
        {
          inputFile=jfc.getSelectedFile();
          jTextFieldInputFile.setText(inputFile.getName());
        }

        updateGUI();
    }//GEN-LAST:event_jButtonFileChooserActionPerformed

    private void jButtonSetThreshToHalfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetThreshToHalfActionPerformed
        RealPhotoPlate of=new RealPhotoPlate(simulation.getPlate());
        of.computeStatValue(jComboBoxOutputType.getSelectedIndex());

        jSliderThresh.setValue((of.getMin()+of.getMax())/2);
    }//GEN-LAST:event_jButtonSetThreshToHalfActionPerformed

    private void jButtonSetThreshToMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetThreshToMedianActionPerformed

        RealPhotoPlate of=new RealPhotoPlate(simulation.getPlate());
        of.computeStatValue(jComboBoxOutputType.getSelectedIndex());

        jSliderThresh.setValue(of.getMedian());
    }//GEN-LAST:event_jButtonSetThreshToMedianActionPerformed

    private void jMenuItemShowImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemShowImageActionPerformed


    }//GEN-LAST:event_jMenuItemShowImageActionPerformed

    private void jMenuItemVaryThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVaryThresholdActionPerformed
        RealPhotoPlate of=new RealPhotoPlate(simulation.getPlate());

        for (int i = 80; i < 170; i+=10) {

            of.computeOutputImage(jComboBoxOutputType.getSelectedIndex(),
                    jCheckBoxMenuItemNormalizePlateValues.isSelected(),
                    jCheckBoxMenuItemClipPlateValues.isSelected(), i);

            of.setDescr(MiscUtils.removeExtension(getDescription(of)));

            String fileName;
            fileName=inputFile.getAbsolutePath();
            fileName=MiscUtils.removeFilename(fileName)+"/";
            fileName+=of.getDescr()+"_"+MiscUtils.padNumber(i, 3);
            fileName+=".gif";

            File file=new File(fileName);

            DebugMessages.inform("Saving: "+file.getAbsolutePath());

            of.saveAsGIF(file);

        }


    }//GEN-LAST:event_jMenuItemVaryThresholdActionPerformed

    private void mainPanelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_mainPanelPropertyChange
        jTextFieldInputFile.setText(inputFile.getName());
        this.getFrame().setTitle("The CorticalCafe.com CGH maker");
//        DebugMessages.inform("Component changed");
    }//GEN-LAST:event_mainPanelPropertyChange


    BatchFrame batchFrame=new BatchFrame();

    private void jMenuItemBatchControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBatchControlActionPerformed
        initBatchProcessing();

        if(!batchFrame.isVisible())
           batchFrame.stopProcessing();
    }//GEN-LAST:event_jMenuItemBatchControlActionPerformed

    private void jComboBoxQuickPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxQuickPickActionPerformed
//        double samp=Double.valueOf(jComboBoxPlateSampling.getSelectedItem().toString());
        double xdpi=0, ydpi=0;
        double xSamp=0, ySamp=0;

        if(jComboBoxQuickPick.getSelectedItem().toString().equals("300x300"))
        {
            xdpi=300;
            ydpi=300;
        }
        else
        if(jComboBoxQuickPick.getSelectedItem().toString().equals("600x600"))
        {
            xdpi=600;
            ydpi=600;
        }
        else
        if(jComboBoxQuickPick.getSelectedItem().toString().equals("1200x600"))
        {
            xdpi=1200;
            ydpi=600;
        }
        else
        if(jComboBoxQuickPick.getSelectedItem().toString().equals("1200x1200"))
        {
            xdpi=1200;
            ydpi=1200;
        }


        jTextFieldPlateXresolution.setText(String.valueOf((int)xdpi));
        jTextFieldPlateYresolution.setText(String.valueOf((int)ydpi));

        xSamp=2.54/(xdpi*100.);
        ySamp=2.54/(ydpi*100.);
        NumberFormat formatter = new DecimalFormat("0.###E0");
        jTextFieldPlateXsampling.setText(formatter.format(xSamp));
        jTextFieldPlateYsampling.setText(formatter.format(ySamp));
    }//GEN-LAST:event_jComboBoxQuickPickActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        CGHapplicationAboutBox tmp=new CGHapplicationAboutBox(null);
        tmp.setLocationRelativeTo(null);
        tmp.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed


    void initBatchProcessing()
    {
        batchFrame.setBatchFileDir(new File(MiscUtils.removeFilename(inputFile.getAbsolutePath())));
        batchFrame.populateList();
        
        batchFrame.setTitle("Batch Processing");

        batchFrame.setCenterObject(jCheckBoxCenterObject.isSelected());
        batchFrame.setCenterPlate(jCheckBoxCenterPlate.isSelected());
        batchFrame.setScaleObject(jCheckBoxScaleObject.isSelected());
        batchFrame.setMultiThread(jCheckBoxMenuItemUseThreading.isSelected());

        batchFrame.setVisible(!batchFrame.isVisible());

        batchFrame.setLocationRelativeTo(null);
    }


    public void startBatchAndFTPprocessing()
    {
        initBatchProcessing();
        batchFrame.startFTPsync();
        batchFrame.startProcessing();
    }


    public void setScaleObject(boolean flag)
    {
        jCheckBoxScaleObject.setSelected(flag);
    }


    public void setCenterObject(boolean flag)
    {
        jCheckBoxCenterObject.setSelected(flag);
    }


    void displayImage(BufferedImage im, String descr)
    {
        OutputFrame frame=new OutputFrame();

        frame.setSaveDir(inputFile);

        frame.setTitle(descr);
        frame.setSize(im.getWidth()+20, im.getHeight()+20);
        frame.setImage(im);
        frame.pack();
        //Center the window
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = frame.getSize();
        if (frameSize.height > screenSize.height)
        {
          frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width)
        {
          frameSize.width = screenSize.width;
        }
        frame.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        frame.setVisible(true);
    }


  /**
   * updates GUI to enable/disable components appropriately based on current configuration.
   * Should be called anytime a component is changed which should enable/disable other components.
   */
  void updateGUI()
  {
    boolean flag;

//    flag=!jCheckBoxDiffractionGrating.isSelected(); //update GUI related to diff grating checkbox
//    jButtonFileChooser.setEnabled(flag);
//    jCheckBoxCenterPlate.setEnabled(flag);
//    jCheckBoxRandomPhase.setEnabled(flag);
//    jLabelInputImageDepth.setEnabled(flag);
//    jLabelInputImageSampling.setEnabled(flag);
//    jLabelInputImageWavelength.setEnabled(flag);
//    jTextFieldInputFile.setEnabled(flag);
//    jLabelInputFile.setEnabled(flag);
//    jComboBoxQuickPick.setEnabled(flag);
//    jLabelPlateSampling.setEnabled(flag);
//    jCheckBoxScaleObject.setEnabled(flag);
//    jCheckBoxCenterObject.setEnabled(flag);


//    jComboBoxGratingOrder.setEnabled(!flag);

//    flag=jCheckBoxCenterObject.isSelected() && jCheckBoxCenterObject.isEnabled();  //if object is centered, plate centering is irrelevant
//    jCheckBoxCenterPlate.setEnabled(!flag);

//    flag=jTextFieldInputFile.getText().toLowerCase().endsWith("gif")
//        &&jTextFieldInputFile.isEnabled(); //some options only apply to GIF image input files
//    jComboBoxInputImageDepth.setEnabled(flag);
//    jLabelInputImageDepth.setEnabled(flag);
//    jComboBoxInputImageSampling.setEnabled(flag);
//    jLabelInputImageSampling.setEnabled(flag);
//    jCheckBoxScaleObject.setEnabled(flag);
//    jCheckBoxCenterObject.setEnabled(flag);

//    flag=!jCheckBoxScaleObject.isSelected();   //update GUI related to scale object checkbox
//    jLabelInputImageSampling.setEnabled(flag);
  }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFileChooser;
    private javax.swing.JButton jButtonSetThreshToHalf;
    private javax.swing.JButton jButtonSetThreshToMedian;
    private javax.swing.JButton jButtonShowOutput;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JCheckBox jCheckBoxCenterObject;
    private javax.swing.JCheckBox jCheckBoxCenterPlate;
    private javax.swing.JCheckBox jCheckBoxDiffractionGrating;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemClipPlateValues;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemNormalizePlateValues;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemUseAttenuation;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemUseLowPriority;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemUseThreading;
    private javax.swing.JCheckBox jCheckBoxOptimizeDepth;
    private javax.swing.JCheckBox jCheckBoxRandomPhase;
    private javax.swing.JCheckBox jCheckBoxScaleObject;
    private javax.swing.JComboBox jComboBoxGratingOrder;
    private javax.swing.JComboBox jComboBoxOutputType;
    private javax.swing.JComboBox jComboBoxQuickPick;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelInputFile;
    private javax.swing.JLabel jLabelInputImageDepth;
    private javax.swing.JLabel jLabelInputImageSampling;
    private javax.swing.JLabel jLabelInputImageWavelength;
    private javax.swing.JLabel jLabelPlateSampling;
    private javax.swing.JMenuItem jMenuItemBatchControl;
    private javax.swing.JMenuItem jMenuItemShowImage;
    private javax.swing.JMenuItem jMenuItemVaryThreshold;
    private javax.swing.JMenu jMenuMisc;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBarStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSliderThresh;
    private javax.swing.JTextArea jTextAreaSimDescr;
    private javax.swing.JTextField jTextFieldImageDepth;
    private javax.swing.JTextField jTextFieldImageWavelength;
    private javax.swing.JTextField jTextFieldInputFile;
    private javax.swing.JTextField jTextFieldObjectSampling;
    private javax.swing.JTextField jTextFieldPlateXresolution;
    private javax.swing.JTextField jTextFieldPlateXsampling;
    private javax.swing.JTextField jTextFieldPlateYresolution;
    private javax.swing.JTextField jTextFieldPlateYsampling;
    private javax.swing.JTextField jTextFieldXoffset;
    private javax.swing.JTextField jTextFieldYoffset;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;


//  My vardefs are below

    File inputFile=new File("/home/astein/NetBeansProjects/CGHapplication/sample_data/object_point.xml");

    //NOTE:  THE ORDER OF OUTPUTTYPES MUST MATCH THE STATIC DEFINITIONS IN OUTPUTFILE.JAVA
    String outputStr[]={"Real", "Real_Binary", "Imaginary", "Imaginary_Binary", "Amplitude",
      "Amplitude_Binary", "Phase", "Phase_Binary", "Intensity",
      "Intensity_Binary"};



    String resolutionStr[]={"1", "67", "100", "300", "600", "900", "1200", "1500",
      "1800", "2400", "3000", "4500"};
    static final int RESOLUTION_DEFAULT_X=3;
    static final int RESOLUTION_DEFAULT_Y=3;

    String fileTypeStr[]={"XML", "Image", "Java"};

    /*
    spatial sampling rates:
    167e-9    1/4 wavelength @ 670nm(red)
    670e-9    1 wavelength @ 670nm
    846e-7    300 DPI sampling (laserprinter)
    423e-7    600 DPI sampling (laserprinter)
    1692e-7   150 DPI
    3384e-7   75 DPI
    6768e-7   37.5 DPI
    1.3536e-3 18.75 DPI
    */
    String plateSamplingStr[]={"167e-9","335e-9", "670e-9","846e-7", "423e-7"};
    static final int PLATE_SAMPLING_DEFAULT=4;

    String gratingOrderStr[]={"1", "2", "4", "8", "16", "32", "64", "128", "256", "512"};

    String inputImageWavelength[]={"400e-9", "500e-9", "600e-9", "630e-9"};
    static final int INPUTIMAGE_WAVELENGTH_DEFAULT=3;

    String inputImageDepthStr[]={"0.5", "1", "2", "4"};
    static final int INPUTIMAGE_DEPTH_DEFAULT=2;

    //Check table above for sampling rates
    String inputImageSamplingStr[]={"423e-7", "846e-7", "1692e-7", "3384e-7", "6768e-7", "1.3536e-3"};
    static final int INPUTIMAGE_SAMPLING_DEFAULT=4;

    Simulation simulation=new Simulation();


  void updateStatus(String text)
  {
//    statusMessageLabel.setText("Status:  "+text+" , time="+(int)(simulation.getCurrentRunTime())
//            +"/"+(int)(simulation.getEstimatedTotalTime())+"(s)");

//    this.getFrame().repaint();

//    DebugMessages.inform(text);
    jProgressBarStatus.setString("Status:  "+text+" , time="+(int)(simulation.getCurrentRunTime())
            +"/"+(int)(simulation.getEstimatedTotalTime())+"(s)");
    jProgressBarStatus.setStringPainted(true);
    
    if(simulation.isSimulationRunning())
        jButtonStart.setText("Stop Simulation");
    else
        jButtonStart.setText("Start Simulation");

  }


  public void setFile(String fileName)
  {
      inputFile=new File(fileName);
  }


}


